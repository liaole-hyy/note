做对事不如跟对人，选择比努力重要，环境也比努力重要，人这在努力的时候最好方式 跟对人做对事

复杂的事情简单做，你就是专家；简单的事情重复做，你就是行家；重复的事情用心做，你就是赢家。 


ThreadLocal对象总结
比较以上两种情况,我们就会发现:
内存泄漏的发生跟 ThreadLocalIMap 中的 key 是否使用弱引用是没有关系的。那么内存泄漏的的真正原因是什么呢？
在以上两种内存泄漏的情况中．都有两个前提：主要两个原因
1 . 没有手动侧除这个 Entry
2 . CurrentThread 当前线程依然运行
解释如下
第一点很好理解，只要在使用完下 ThreadLocal ，调用其 remove 方法删除对应的 Entry ，就能避免内存泄漏。
第二点稍微复杂一点，由于ThreadLocalMap 是 Thread 的一个属性，被当前线程所引用，
所以ThreadLocalMap的生命周期跟 Thread 一样长。那么在使用完 ThreadLocal 的使用，如果当前Thread 也随之执行结束，
ThreadLocalMap 自然也会被 gc 回收，从根源上避免了内存泄漏。

那么为什么key要用弱引用呢？
事实上，在 ThreadLocalMap 中的set/getEntry 方法中，会对 key 为 null（也即是 ThreadLocal 为 null ）进行判断
，如果为 null 的话，那么会把 value 置为 null 的．
​这就意味着使用完 ThreadLocal , CurrentThread 依然运行的前提下．就算忘记调用 remove 方法，弱引用比强引用可以多一层保障：
弱引用的 ThreadLocal 会被回收．对应value在下一次 ThreadLocaIMap 调用 set/get/remove 中的任一方法的时候会被清除，
从而避免内存泄漏．


spring中编程思想

1.OOP  面向对象
2.BOP  面向bean
3.AOP  面向切面
4.IOC  控制权反正
5.DI/DL 依赖注入(对象赋值)，依赖查找 有bean容器

赋值方式
构造，set,属性直接赋值

v1.x 注解驱动启蒙时代
v2.0 注解驱动过度时代
v2.5 引入新骨架时代
v3.x 注解驱动黄金时代
v4.x 注解驱动完善时代
v5.x 注解驱动成熟时代

spring5 注解编程基础组件

Annotation API

1.配置组件
@Configuration
@ComponentScan
@Scope  
@Lazy  主要应用在单例条件下，用时在创建，多例下无用，多例是用的时候创建
@Conditional
@Import  三种方式 1. @Import导入 ，2. 实现ImportSelector自定义规则实现，3实现ImportDeanDefinitionRegistrar 4.封装成FactoryBean
生命周期  1.配置@bean的参数  2分别实现InitializingBean和DisposableBean接口 @PostConstruct @PreDestory
@PostConstruct 
@PreDestory
@DependsOn

2.赋值组件
@Component
@Service 
@Controller
@Repository
@Value
@Autorwied
@PropertySource
@Qualifier  如存在多个实例配合使用
@Primary   自动装配时当出现多个bean候选者时，被注解@Primary的Bean将作为首选者，否则抛弃异常
@Resource 默认按名称装配，当找不到与名称匹配的bean才按类型装配

3.织入组件
ApplicationContextAware
BeanDefinitionRegistryPostProcessor;

4.切面组件
@EnableTransactionManagement
@Transational

300行手写spring源码v1.0
1.定位，2加载 3注册，4自动依赖注入5mvc初始化 6 dispatch分发

顶层类设计相关（如下顶层类的分离抽象）
BeanFactory

ListableBeanFactory
AutowireCapableBeanFactory
HierarchicalBeanFactory

ApplicationContext

WepApplicationContext FileSystemXmlApplicationContext ClassPathXmlApplicationConext AnnotationConfigApplicationContext

Map容器

Factory工厂

BeanDefinition 元信息,配置，这里配置形式有xml,yml,annatation、properties

Bean实例，反射实例化Object
这里存在原生的Bean,代理的Bean
封装在 BeanWrapper 包装器模式

Reader解析器

Context上下文
30类手写三级缓存
spring bean的三级缓存（通过构造函数注入的不能解决循环依赖，非单例的，不支持循环依赖）

一级缓存:已经完成了依赖注入的bean

二级缓存:早期的纯净bean

三级缓存:终极缓存，为aop动态代理

顶层类手写spring MVC 

Servlet MVC核心初始化方法
initStrategies(ApplicationContext context){
   //多文件上传组件
   initMultipartResolver(context);
   //初始化本地语言环境
   initLocaleResolver(context);
   //初始化模板处理器
   initThemeResolver(context);
   //handlerMappings
   initHandlerMappings(context);
   //初始化参数适配器
   initHandlerAdapters(context);
   //初始化异常拦截器
   initHandlerExceptionResolvers(context);
   //初始化视图预处理
   initRequestToViewNameTranslator(conext);
   //初始化视图转换器
   initViewResolvers(context);
   //FlashMap管理器
   initFlashMapManager(context);
}
1.找到对应HandlerMapping
2.找到对应HandlerAdapter
3.ha.handle()找到对应的ModelAndView
4.ViewResovler找到对应的view对象
5.view.render();

抽象类 
DispatcherSerlvet
HandlerMapping
HandlerAdapter
ModealAndView
ViewResolver 氛围

spring AOP 
AOP 解决了硬编码，可以解决日志监控，权限控制，事务控制....
AdvisedSupport 工具类:解析AOP配置信息，并且构建切面与切点之间的关系
AopConfig保存AOP的配置信息
Adivce 通知，完成切面回调封装
JdkDynamicAopProxy 使用jdk生成代理类的工具
CglibAopProxy 使用Cglib生成代理类的工具
DefaultAopProxyFactory



MVC源码流程

DispatcherServlet init()方法， 初始化九大组件

DispacherServlet doService()方法

getHandler 拿到HandlerMapping chain
getHandlerAdapter（handlerMapping）
adpter.handler() --->ModelAndView
processDispatchResult() -->view.render()

springMVC优化使用点
1.Controller如果能保持单例，尽量使用的单例，
2.处理Request的方法中的形参务必加上@RequestParam注解（申明式的编程可以加速程序处理）
3.缓存URL


spring5新特性面试点
1.升级JDK8,j2EE7
2.反应式的编程  netty
3.全面支持注解编程
4.支持函数式编程
5.全面支持REST风格配置
6.对http2.0全面支持
7.Kotlin和Spring WebFlux Flux<> Mono<>
8.可以直接使用Lambda表达式来注册Bean
9.Spring WebMVC全面最新的ServletAPI
10junit5直接执行并发测试
11丢弃hibernate3/4,只支持hibernate5，对Portlet,Velocity,XMlBeans、JDO、Guava终止支持
12spring核心容器坐了一些更新@Nullable、Logback

spring经典面试题
1.spring框架能给我们带来哪些好处？
答：简化开发，解放双手
提供了内置解决方案BOP,IOC，AOP思想，
声明式事务管理TransactionManager，
提供诸多工具类，jdbcTemplate,BeanUtils,RedisTemplate等

2.BeanFactory和ApplicationContext有什么区别？
答：ApplicationContext是Beanfactory的实现类
2.BeanFactory是顶层设计(抽象)，而ApplicationContext是user interface
3.ApplicationContext功能丰富，api是最全的，一般会认为ApplicationContext就是IOC
4.IOC的真正功能实现时在DefaultListableBeanFactory类中完成的

3.请解释一下Spring Bean的生命周期
所谓生命周期，从创建，到调用，到销毁
如果说singleton 从spring容器的启动都spring容器的销毁，如果是延迟加载，在调用前创建对象
prototype 在调用前创建，调用后销毁
作用域决定了生命周期的长短

4.Spring Bean的作用域之间的区别
singleton 每个quest请求，只有一个实例
prototype 全局的，每次都是新的实例
request 每个quest请求，都会有对应的实例，quest请求之间发生作用
session 整个回话请求，只有一个实例，session之间生效，一般默认为30分钟
global-session application 可以理解为容器中的一个应用。(spring5 不支持)

5.Spring中Bean是线程安全的吗？
spring bean本身没有所谓安不安全，spring只是负责bean的生成，是否线程安全和自己写的代码有关

6.请问spring中用到哪些设计模式？
单例模式（singleton），多例模式（prototype），工厂模式（Factory），装饰器模式，动态代理模式，
抽象模板方法模式,委派模式，适配器模式，包装器模式

7.Spring,Springboot,Spring Cloud到底有什么区别？
Spring已有的生态，它完成了我的日常开发的所有的功能开发，一个spring打天下。

SpringBoot,简化开发，spring减的还不够，配置文件很头疼，SpringBoot集成了很多中间件，有很多默认的自动化配置方便，
整个应用开发。全面去Servlet化，能够自运行，部署也简单了。版本控制也方便了，一个jar打天下。
官方层面提供了一套脚手架，一键搭建，节省时间,构建服务快速(即微服务)。

SpringCloud:正式进军分布式
	注册中心，服务发现，服务负载，熔断，监控，配置中心，服务网关。
	打造一个java开发web生态,一站式
	springclound依赖springboot,springboot依赖spring	
	
	Dubbo RPC,分布式服务治理框架， Netty，Spring,Zookeeper,Ngin...

8.Spring事务怎么传播？
为什么spring事务能够挂起，
规则先不说，看配置看的出来

TransactionManager,代理模式

pool

Before(){
	connection.setAutoCommit(false);
}

execute()原始的逻辑，拿到的是DataSource， connection

after(){
     if(condtion){
	conn.rollback();
     }else {
	conn.commit();
     }
}
finaylly{
}

9FactoryBean和BeanFacotry区别？
BeanFacotry就是ioc的顶层设计，FactoryBean是用来构建Bean的包装类，通过&name来获取一个能生产或者修饰对象生成的工厂Bean，
但对FactoryBean而言，这个Bean不是简单的Bean，它专门来构建生产某个bean

10.一个方法内，for循环内重复操作数据库，是用一个链接还是多个连接
千万不在一个方法内for循环去查询数据库，因为多次连接数据库，导致连接池的数量不可控，循环的次数未知

解决方案:
1.分页
2.缓存
3.联合查询
